// Generated by CoffeeScript 1.3.3
(function() {
  var Spectr,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Spectr = {};

  this.Spectr = Spectr;

  Spectr.VERSION = '0.0.1';

  Spectr.ajax = function(model, type, params) {
    var options;
    options = {};
    options.url = model.url();
    options.type = type;
    options.data = type === 'GET' ? {} : model.toJson();
    $.extend(options, params);
    return $.ajax(options);
  };

  Spectr.Object = (function() {

    Object.prototype.attributes = {};

    Object.prototype.events = {};

    Object.prototype.template = {};

    Object.prototype.resource = '';

    function Object(params) {
      var bind, callback, event, _ref,
        _this = this;
      if (params == null) {
        params = document;
      }
      this.publish = __bind(this.publish, this);

      this.subscribe = __bind(this.subscribe, this);

      this.save = __bind(this.save, this);

      this.fetch = __bind(this.fetch, this);

      this.url = __bind(this.url, this);

      this.isNew = __bind(this.isNew, this);

      this.toJson = __bind(this.toJson, this);

      this.set = __bind(this.set, this);

      this.get = __bind(this.get, this);

      this.escape = __bind(this.escape, this);

      this.render = __bind(this.render, this);

      if (typeof params === 'object') {
        if (params instanceof jQuery || params === document) {
          this.el = params;
        } else {
          this.el = params.el || document;
          this.attributes = params.attr || {};
        }
      }
      _ref = this.events;
      for (event in _ref) {
        callback = _ref[event];
        if (event.match(/:/)) {
          bind = event.split(':');
          $(this.el).on(bind[0], bind[1], function(event) {
            var data;
            data = $(event.target).data();
            data.target = event.target;
            return _this[callback](data);
          });
        } else {
          this.subscribe(event, callback);
        }
      }
      if (this.initialize != null) {
        this.initialize;
      }
    }

    Object.prototype.render = function() {
      return $(this.el).empty().html(this.template(this.attributes));
    };

    Object.prototype.escape = function(string) {
      var escapes,
        _this = this;
      escapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        '/': '&#x2F;'
      };
      return ("" + string).replace(/[&<>"'\/]/g, function(match) {
        return escapes[match];
      });
    };

    Object.prototype.get = function(name) {
      return this.attributes[name];
    };

    Object.prototype.set = function(name, value) {
      var key, val;
      if (typeof name === 'object' || name === null) {
        for (key in name) {
          val = name[key];
          this.attributes[key] = this.escape(val);
        }
      } else {
        this.attributes[name] = this.escape(value);
      }
      return this.render();
    };

    Object.prototype.toJson = function() {
      var data;
      data = {};
      data[this.constructor.name.toLowerCase()] = this.attributes;
      return data;
    };

    Object.prototype.isNew = function() {
      return this.get('id') === void 0;
    };

    Object.prototype.url = function() {
      var param, params, resource, _i, _len;
      resource = this.resource;
      params = this.resource.match(/:[a-z_]+/) || [];
      for (_i = 0, _len = params.length; _i < _len; _i++) {
        param = params[_i];
        resource = resource.replace(param, this.get(param.replace(/:/, '')));
      }
      if (this.isNew()) {
        return resource;
      } else {
        return "" + resource + "/" + (this.get('id'));
      }
    };

    Object.prototype.fetch = function() {
      var _this = this;
      return Spectr.ajax(this, "GET", {
        success: function(json) {
          return _this.set(json);
        }
      });
    };

    Object.prototype.save = function() {
      var type,
        _this = this;
      type = this.isNew() ? "POST" : "PUT";
      return Spectr.ajax(this, type, {
        success: function(json) {
          return _this.set(json);
        }
      });
    };

    Object.prototype.subscribe = function(event, callback) {
      var _this = this;
      return $(document).on(event, function(event) {
        return _this[callback](collectEventData(event));
      });
    };

    Object.prototype.publish = function(event, data) {
      if (data == null) {
        data = null;
      }
      return $(document).trigger(event, data);
    };

    return Object;

  })();

}).call(this);
